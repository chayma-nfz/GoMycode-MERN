{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Admin\\\\Desktop\\\\Nouveau dossier (2)\\\\ECommerce-MERN\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\Nouveau dossier (2)\\\\ECommerce-MERN\\\\client\\\\src\\\\components\\\\Shop\\\\Checkbox.js\";\nimport React, { useState } from 'react';\n\nconst Checkbox = ({\n  categories,\n  handleFilters\n}) => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        checked = _useState2[0],\n        setChecked = _useState2[1];\n\n  const handleToggle = categoryId => () => {\n    //return -1 if categoryId is not in the checked state\n    const currentCategoryId = checked.indexOf(categoryId); //if -1, push it to the state, else splice it out\n\n    const newCheckedCategoryId = [...checked];\n\n    if (currentCategoryId === -1) {\n      newCheckedCategoryId.push(categoryId);\n    } else {\n      newCheckedCategoryId.splice(currentCategoryId, 1);\n    }\n\n    setChecked(newCheckedCategoryId); //pass [ids] to parent components\n\n    handleFilters(newCheckedCategoryId);\n  };\n\n  return categories.map(category => React.createElement(\"li\", {\n    className: \"list-unstyled ml-4\",\n    key: category._id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"form-check\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"checkbox\",\n    className: \"form-check-input \",\n    onChange: handleToggle(category._id),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    className: \"form-check-label font-weight-bold\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, category.name))));\n};\n\nexport default Checkbox;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/Nouveau dossier (2)/ECommerce-MERN/client/src/components/Shop/Checkbox.js"],"names":["React","useState","Checkbox","categories","handleFilters","checked","setChecked","handleToggle","categoryId","currentCategoryId","indexOf","newCheckedCategoryId","push","splice","map","category","_id","name"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,UAAF;AAAcC,EAAAA;AAAd,CAAD,KAAmC;AAAA,oBACpBH,QAAQ,CAAC,EAAD,CADY;AAAA;AAAA,QAC3CI,OAD2C;AAAA,QAClCC,UADkC;;AAGlD,QAAMC,YAAY,GAAGC,UAAU,IAAI,MAAM;AACvC;AACA,UAAMC,iBAAiB,GAAGJ,OAAO,CAACK,OAAR,CAAgBF,UAAhB,CAA1B,CAFuC,CAGvC;;AACA,UAAMG,oBAAoB,GAAG,CAAC,GAAGN,OAAJ,CAA7B;;AACA,QAAII,iBAAiB,KAAK,CAAC,CAA3B,EAA8B;AAC5BE,MAAAA,oBAAoB,CAACC,IAArB,CAA0BJ,UAA1B;AACD,KAFD,MAEO;AACLG,MAAAA,oBAAoB,CAACE,MAArB,CAA4BJ,iBAA5B,EAA+C,CAA/C;AACD;;AACDH,IAAAA,UAAU,CAACK,oBAAD,CAAV,CAVuC,CAWvC;;AACAP,IAAAA,aAAa,CAACO,oBAAD,CAAb;AACD,GAbD;;AAeA,SAAOR,UAAU,CAACW,GAAX,CAAeC,QAAQ,IAC5B;AAAI,IAAA,SAAS,EAAC,oBAAd;AAAmC,IAAA,GAAG,EAAEA,QAAQ,CAACC,GAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,IAAI,EAAC,UADP;AAEE,IAAA,SAAS,EAAC,mBAFZ;AAGE,IAAA,QAAQ,EAAET,YAAY,CAACQ,QAAQ,CAACC,GAAV,CAHxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAME;AAAO,IAAA,SAAS,EAAC,mCAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,QAAQ,CAACE,IADZ,CANF,CADF,CADK,CAAP;AAcD,CAhCD;;AAkCA,eAAef,QAAf","sourcesContent":["import React, { useState } from 'react';\n\nconst Checkbox = ({ categories, handleFilters }) => {\n  const [checked, setChecked] = useState([]);\n\n  const handleToggle = categoryId => () => {\n    //return -1 if categoryId is not in the checked state\n    const currentCategoryId = checked.indexOf(categoryId);\n    //if -1, push it to the state, else splice it out\n    const newCheckedCategoryId = [...checked];\n    if (currentCategoryId === -1) {\n      newCheckedCategoryId.push(categoryId);\n    } else {\n      newCheckedCategoryId.splice(currentCategoryId, 1);\n    }\n    setChecked(newCheckedCategoryId);\n    //pass [ids] to parent components\n    handleFilters(newCheckedCategoryId);\n  };\n\n  return categories.map(category => (\n    <li className=\"list-unstyled ml-4\" key={category._id}>\n      <div className=\"form-check\">\n        <input\n          type=\"checkbox\"\n          className=\"form-check-input \"\n          onChange={handleToggle(category._id)}\n        />\n        <label className=\"form-check-label font-weight-bold\">\n          {category.name}\n        </label>\n      </div>\n    </li>\n  ));\n};\n\nexport default Checkbox;\n"]},"metadata":{},"sourceType":"module"}