{"ast":null,"code":"import _objectSpread from\"C:\\\\Users\\\\Admin\\\\Desktop\\\\Nouveau dossier (2)\\\\ECommerce-MERN\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";export var addItem=function addItem(item,next){var cart=[];if(typeof window!=='undefined'){if(localStorage.getItem('cart')){cart=JSON.parse(localStorage.getItem('cart'));}cart.push(_objectSpread({},item,{count:1}));// remove duplicates\n// build an Array from new Set and turn it back into array using Array.from\n// so that later we can re-map it\n// new set will only allow unique values in it\n// so pass the ids of each object/product\n// If the loop tries to add the same value again, it'll get ignored\n// ...with the array of ids we got on when first map() was used\n// run map() on it again and return the actual product from the cart\ncart=Array.from(new Set(cart.map(function(p){return p._id;}))).map(function(id){return cart.find(function(p){return p._id===id;});});localStorage.setItem('cart',JSON.stringify(cart));next();}};export var updateItem=function updateItem(productId,count){var cart=[];if(typeof window!=='undefined'){if(localStorage.getItem('cart')){cart=JSON.parse(localStorage.getItem('cart'));}//find the product in the cart by id and set prop of count to it\ncart.map(function(product,i){if(product._id===productId){cart[i].count=count;}return null;});localStorage.setItem('cart',JSON.stringify(cart));}};export var removeItem=function removeItem(productId,next){var cart=[];if(typeof window!=='undefined'){if(localStorage.getItem('cart')){cart=JSON.parse(localStorage.getItem('cart'));}//find the product in the cart by id and set prop of count to it\ncart.map(function(product,i){if(product._id===productId){cart.splice(i,1);}return null;});localStorage.setItem('cart',JSON.stringify(cart));next();}return cart;};export var getItemTotal=function getItemTotal(){if(typeof window!=='undefined'){if(localStorage.getItem('cart')){return JSON.parse(localStorage.getItem('cart')).length;}}return 0;};export var getCart=function getCart(){if(typeof window!=='undefined'){if(localStorage.getItem('cart')){return JSON.parse(localStorage.getItem('cart'));}}return[];};export var emptyCart=function emptyCart(next){if(typeof window!=='undefined'){localStorage.removeItem('cart');next();}};","map":{"version":3,"sources":["C:/Users/Admin/Desktop/Nouveau dossier (2)/ECommerce-MERN/client/src/helpers/cart.js"],"names":["addItem","item","next","cart","window","localStorage","getItem","JSON","parse","push","count","Array","from","Set","map","p","_id","id","find","setItem","stringify","updateItem","productId","product","i","removeItem","splice","getItemTotal","length","getCart","emptyCart"],"mappings":"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","sourcesContent":["export const addItem = (item, next) => {\n  let cart = [];\n  if (typeof window !== 'undefined') {\n    if (localStorage.getItem('cart')) {\n      cart = JSON.parse(localStorage.getItem('cart'));\n    }\n    cart.push({\n      ...item,\n      count: 1\n    });\n    // remove duplicates\n    // build an Array from new Set and turn it back into array using Array.from\n    // so that later we can re-map it\n    // new set will only allow unique values in it\n    // so pass the ids of each object/product\n    // If the loop tries to add the same value again, it'll get ignored\n    // ...with the array of ids we got on when first map() was used\n    // run map() on it again and return the actual product from the cart\n\n    cart = Array.from(new Set(cart.map(p => p._id))).map(id => {\n      return cart.find(p => p._id === id);\n    });\n\n    localStorage.setItem('cart', JSON.stringify(cart));\n    next();\n  }\n};\n\nexport const updateItem = (productId, count) => {\n  let cart = [];\n  if (typeof window !== 'undefined') {\n    if (localStorage.getItem('cart')) {\n      cart = JSON.parse(localStorage.getItem('cart'));\n    }\n    //find the product in the cart by id and set prop of count to it\n    cart.map((product, i) => {\n      if (product._id === productId) {\n        cart[i].count = count;\n      }\n      return null;\n    });\n    localStorage.setItem('cart', JSON.stringify(cart));\n  }\n};\n\nexport const removeItem = (productId, next) => {\n  let cart = [];\n  if (typeof window !== 'undefined') {\n    if (localStorage.getItem('cart')) {\n      cart = JSON.parse(localStorage.getItem('cart'));\n    }\n    //find the product in the cart by id and set prop of count to it\n    cart.map((product, i) => {\n      if (product._id === productId) {\n        cart.splice(i, 1);\n      }\n      return null;\n    });\n    localStorage.setItem('cart', JSON.stringify(cart));\n    next();\n  }\n  return cart;\n};\n\nexport const getItemTotal = () => {\n  if (typeof window !== 'undefined') {\n    if (localStorage.getItem('cart')) {\n      return JSON.parse(localStorage.getItem('cart')).length;\n    }\n  }\n  return 0;\n};\n\nexport const getCart = () => {\n  if (typeof window !== 'undefined') {\n    if (localStorage.getItem('cart')) {\n      return JSON.parse(localStorage.getItem('cart'));\n    }\n  }\n  return [];\n};\n\nexport const emptyCart = next => {\n  if (typeof window !== 'undefined') {\n    localStorage.removeItem('cart');\n    next();\n  }\n};\n"]},"metadata":{},"sourceType":"module"}